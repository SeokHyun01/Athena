@page "/camera/{cameraId:int}/register"

@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject ILogger<Callee> _logger

@*  @implements IAsyncDisposable *@


<div>
	<video id="remoteVideo" autoplay width="460" height="345"></video>
	<video id="video" autoplay width="460" height="345"></video>
	<button id="muteButton" class="btn btn-primary"> Mute</button>
	<button id="cameraButton" class="btn btn-primary"> Turn Camera Off</button>
	<select id="camerasSelect" class="form-control-sm"></select>
</div>


@code {
	[Parameter]
	public int CameraId { get; set; }

	[Parameter]
	public int CameraIdToThumbnail { get; set; }

	[Parameter]
	public string UserIdToThumbnail { get; set; }

	[Parameter]
	public bool fromThumbnail { get; set; } = false;

	private HubConnection? hubConnection;

	private string ConnectionId { get; set; } = string.Empty;
	private string RoomName { get; set; } = string.Empty;
	private string UserId { get; set; } = string.Empty;

	protected override async Task OnAfterRenderAsync(bool firstRander)
	{
		if (firstRander)
		{
			//await DotnetHelperCallee();

			//웹: thumbnail 페이지에서 넘어온 경우 앱: webRTC 페이지 직접 접속한 경우
			if (fromThumbnail)
			{
				// thumbnail 페이지에서 넘어온 경우
				UserId = UserIdToThumbnail;
				CameraId = CameraIdToThumbnail;
			}

			// SignalR
			hubConnection = new HubConnectionBuilder()
			.WithUrl(_navigationManager.ToAbsoluteUri("/hubs/signaling"), (opts) =>
			{
				opts.HttpMessageHandlerFactory = (message) =>
				{
					if (message is HttpClientHandler clientHandler)
					{
						// SSL 인증 무시
						clientHandler.ServerCertificateCustomValidationCallback +=
				(sender, certificate, chain, sslPolicyErrors) => { return true; };
					}
					return message;
				};
			}).Build();

			_logger.LogInformation($"Camera Id: {CameraId}");
			// SignalR Handler
			hubConnection.On<string>("OnConnected", async (senderId) =>
			{
				ConnectionId = senderId;
				await _jsRuntime.InvokeVoidAsync("initializeCamera", ConnectionId, UserId.ToString(), CameraId);
			});

			@* hubConnection.On("Welcome", async () =>
			{
				_logger.LogInformation("Welcome 받았디");
				var offer = await _jsRuntime.InvokeAsync<string>("sendOffer");
				await hubConnection.SendAsync("SendOffer", offer, RoomName);
			}); *@

			hubConnection.On<string>("ReceiveOffer", async (receivedOffer) =>
			{
				@*  OnConnected 이후 1번 *@
				_logger.LogInformation("ReceiveOffer 받았디");
				var answer = await _jsRuntime.InvokeAsync<string>("sendAnswer", receivedOffer);
				_logger.LogInformation("answer: ${answer}");
				await hubConnection.SendAsync("SendAnswer", answer, RoomName);
			});

			@* hubConnection.On<string>("ReceiveAnswer", async (receivedAnswer) =>
			{
				_logger.LogInformation("ReceiveAnswer 받았디");
				await _jsRuntime.InvokeVoidAsync("receiveAnswer", receivedAnswer);
				_logger.LogInformation("ReceiveAnswer");
			}); *@

			hubConnection.On<string>("ReceiveIce", async (receivedIce) =>
			{
					@*  OnConnected 이후 2번  반복 *@
				_logger.LogInformation("ReceiveIce 받았디");
				await _jsRuntime.InvokeVoidAsync("receiveIce", receivedIce);
				_logger.LogInformation("ReceiveIce");
			});

			await hubConnection.StartAsync();

			RoomName = $"{CameraId.ToString()}";
			await hubConnection.SendAsync("JoinRoom", RoomName);
		}
	}

	@* // Dispose
	public async ValueTask DisposeAsync()
	{
		if (hubConnection != null && fromThumbnail)
		{
			await hubConnection.StopAsync();
			await hubConnection.DisposeAsync();
		}
	}

	//js에서 호출
	[JSInvokable]
	public async ValueTask DisposeAsyncFromJs()
	{
		_logger.LogInformation("DisposeAsyncFromJs 호출!");

		if(hubConnection != null){
			await hubConnection.StopAsync();
			await hubConnection.DisposeAsync();
		}
	}

	//dotnet helper 생성
	public async Task DotnetHelperCallee()
	{
		await _jsRuntime.InvokeVoidAsync("dotnetHelperCallee", DotNetObjectReference.Create(this));
	} *@

}