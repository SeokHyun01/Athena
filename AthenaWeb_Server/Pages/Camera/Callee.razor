@page "/user/{userId:guid}/camera/{cameraId:int}/register"

@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject ILogger<Callee> _logger

@implements IAsyncDisposable


<div class="container my-5">
	<div class="row">
		<div class="col-6">
			<video id="localVideo" autoplay width="640" height="480"></video>
		</div>
		<div class="col-6">
			<canvas id="outputCanvas"></canvas>
		</div>
	</div>
	<div class="row my-1">
		<div class="col-12">
			<button id="muteButton" class="btn btn-primary"> Mute</button>
			<button id="cameraButton" class="btn btn-primary"> Turn Camera Off</button>
			<select id="camerasSelect" class="form-control-sm"></select>
		</div>
	</div>
	<div class="row my-2">
		<div class="col-12">
			<video id="remoteVideo" autoplay width="640" height="480"></video>
		</div>
	</div>
</div>


@code {
	[Parameter]
	public Guid UserId { get; set; }

	[Parameter]
	public int CameraId { get; set; }

	private HubConnection? hubConnection;
	private string? ConnectionId { get; set; }
	private string? RoomName { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		hubConnection = new HubConnectionBuilder()
				.WithUrl(_navigationManager.ToAbsoluteUri("/hubs/signaling"), (opts) =>
				{
					opts.HttpMessageHandlerFactory = (message) =>
					{
						if (message is HttpClientHandler clientHandler)
						{
							clientHandler.ServerCertificateCustomValidationCallback +=
								(sender, certificate, chain, sslPolicyErrors) => { return true; };
						}
						return message;
					};
				}).Build();

		hubConnection.On<string>("OnConnected", async (senderId) =>
		{
			ConnectionId = senderId;
			await _jsRuntime.InvokeVoidAsync("initializeRTCVideoCall", ConnectionId, UserId.ToString(), CameraId);
		});

		hubConnection.On("Welcome", async () =>
		{
			_logger.LogInformation("누군가 방에 입장했습니다. 어서오세요.");

			var offer = await _jsRuntime.InvokeAsync<string>("sendOffer");
			await hubConnection.SendAsync("SendOffer", offer, RoomName);
		});

		hubConnection.On<string>("ReceiveOffer", async (receivedOffer) =>
		{
			var answer = await _jsRuntime.InvokeAsync<string>("sendAnswer", receivedOffer);
			await hubConnection.SendAsync("SendAnswer", answer, RoomName);
		});

		hubConnection.On<string>("ReceiveAnswer", async (receivedAnswer) =>
		{
			await _jsRuntime.InvokeVoidAsync("receiveAnswer", receivedAnswer);
		});

		hubConnection.On<string>("ReceiveIce", async (receivedIce) =>
		{
			await _jsRuntime.InvokeVoidAsync("receiveIce", receivedIce);
		});

		await hubConnection.StartAsync();

		RoomName = $"{CameraId.ToString()}";
		await hubConnection.SendAsync("JoinRoom", RoomName);

		await _jsRuntime.InvokeVoidAsync("initializeMOG2MotionDetector", UserId.ToString(), CameraId);
	}

	public async ValueTask DisposeAsync()
	{
		await _jsRuntime.InvokeVoidAsync("disposeRTCVideoCall");
		await _jsRuntime.InvokeVoidAsync("disposeMOG2MotionDetector");

		if (hubConnection != null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}