@page "/camera/{cameraId:int}"

@inject IJSRuntime _jsRuntime
@inject ICameraRepository _cameraRepository
@inject NavigationManager _navigationManager
@inject ILogger<Caller> _logger

@implements IAsyncDisposable


<section class="page-section">
	<div class="container">
		<div class="bg-white border rounded-5">
			<section class="p-4 text-center w-100">
				<video id="video" autoplay width="360" height="270"></video>
				<video id="remoteVideo" class="m-1" autoplay width="360" height="270"></video>
			</section>

			<div class="p-4 text-center border-top">
				<button id="muteButton" class="btn btn-primary m-1">음소거</button>
				<button id="cameraButton" class="btn btn-primary">카메라 끄기</button>
				<select id="camerasSelect" class="form-control-sm m-3"></select>
				@if (IsLoading)
				{
					<div class="spinner-border text-primary" role="status"></div>
				}
				else
				{
					<input id=@($"angleInput{Camera.Id}") type="range" value=@(Camera.Angle) min="0" max="180" step="1" @onchange="(args)=>SetCameraAngle(args)" />
				}
			</div>
		</div>
	</div>
</section>


@code {
	[CascadingParameter]
	public Task<AuthenticationState> _authState { get; set; }

	[Parameter]
	public int CameraId { get; set; }

	private bool IsLoading { get; set; }

	private CameraDTO Camera { get; set; } = new CameraDTO();

	private HubConnection? hubConnection;

	private string ConnectionId { get; set; } = string.Empty;
	private string RoomName { get; set; } = string.Empty;
	private string UserName { get; set; } = string.Empty;

	private IMqttClient? mqttClient;


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			IsLoading = true;
			StateHasChanged();

			var authState = await _authState;
			UserName = authState?.User?.Identity?.Name;
			if (string.IsNullOrEmpty(UserName))
			{
				throw new ArgumentNullException(nameof(UserName));
			}

			_logger.LogInformation($"Camera Id: {CameraId}");
			Camera = await _cameraRepository.Get(CameraId);

			hubConnection = new HubConnectionBuilder()
			.WithUrl(_navigationManager.ToAbsoluteUri("/hubs/signaling"), options =>
			{
				options.HttpMessageHandlerFactory = message =>
			{
				if (message is HttpClientHandler clientHandler)
				{
					clientHandler.ServerCertificateCustomValidationCallback +=
						(sender, certificate, chain, sslPolicyErrors) => true;
				}
				return message;
			};
			})
			.Build();

			hubConnection.On<string>("OnConnected", async (senderId) =>
			{
				ConnectionId = senderId;
				await _jsRuntime.InvokeVoidAsync("initializeCamera", ConnectionId, UserName, CameraId);
			});

			hubConnection.On("Welcome", async () =>
			{
				var offer = await _jsRuntime.InvokeAsync<string>("sendOffer");
				await hubConnection.SendAsync("SendOffer", offer, RoomName);
			});

			hubConnection.On<string>("ReceiveOffer", async (receivedOffer) =>
			{
				var answer = await _jsRuntime.InvokeAsync<string>("sendAnswer", receivedOffer);
				await hubConnection.SendAsync("SendAnswer", answer, RoomName);
			});

			hubConnection.On<string>("ReceiveAnswer", async (receivedAnswer) =>
			{
				await _jsRuntime.InvokeVoidAsync("receiveAnswer", receivedAnswer);
			});

			hubConnection.On<string>("ReceiveIce", async (receivedIce) =>
			{
				await _jsRuntime.InvokeVoidAsync("receiveIce", receivedIce);
			});

			await hubConnection.StartAsync();

			RoomName = $"{CameraId.ToString()}";
			await hubConnection.SendAsync("JoinRoom", RoomName);

			IsLoading = false;
			StateHasChanged();

			var mqttFactory = new MqttFactory();
			mqttClient = mqttFactory.CreateMqttClient();

			mqttClient.ApplicationMessageReceivedAsync += async e =>
			{
				var payload = e.ApplicationMessage.Payload;
				if (payload != null && payload.Length > 0)
				{
					if (e.ApplicationMessage.Topic == "camera/update/degree/ack")
					{
						var updateCamera = JsonSerializer.Deserialize<UpdateCameraDTO>(payload);
						if (updateCamera != null)
						{
							var InputId = $"angleInput{updateCamera.CameraId}";
							await _jsRuntime.InvokeVoidAsync("setInputDisabled", InputId, false);
						}
					}
				}
			};

			var mqttClientOptions = new MqttClientOptionsBuilder()
				.WithTcpServer("ictrobot.hknu.ac.kr", 8085)
				.WithCleanSession(true)
				.Build();
			await mqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);

			var mqttSubscribeOptions = mqttFactory.CreateSubscribeOptionsBuilder()
				.WithTopicFilter(
				f =>
				{
					f.WithTopic("camera/update/degree/ack");
				})
				.Build();
			await mqttClient.SubscribeAsync(mqttSubscribeOptions, CancellationToken.None);

			var callHeader = new CallHeaderDTO
				{
					UserId = UserName,
					CameraId = CameraId
				};
			var callHeaderJson = JsonSerializer.Serialize<CallHeaderDTO>(callHeader);

			var applicationMessage = new MqttApplicationMessageBuilder()
				.WithTopic("call/start")
				.WithPayload(callHeaderJson)
				.Build();
			await mqttClient.PublishAsync(applicationMessage, CancellationToken.None);
		}
	}

	private async Task SetCameraAngle(ChangeEventArgs args)
	{
		if (args.Value != null)
		{
			var cameraId = CameraId;
			var angle = int.Parse(args.Value.ToString());
			Camera.Angle = angle;
			await InvokeAsync(StateHasChanged);
			await _cameraRepository.Update(Camera);

			var updateCamera = new UpdateCameraDTO
				{
					CameraId = cameraId,
					Degree = angle
				};
			var updateCameraJson = JsonSerializer.Serialize<UpdateCameraDTO>(updateCamera);

			if (mqttClient != null && mqttClient.IsConnected)
			{
				var applicationMessage = new MqttApplicationMessageBuilder()
					.WithTopic("camera/update/degree/syn")
					.WithPayload(updateCameraJson)
					.Build();
				await mqttClient.PublishAsync(applicationMessage, CancellationToken.None);

				var InputId = $"angleInput{cameraId}";
				await _jsRuntime.InvokeVoidAsync("setInputDisabled", InputId, true);
			}
		}
	}

	public async ValueTask DisposeAsync()
	{
		//await _jsRuntime.InvokeVoidAsync("disposeRTCVideoCall");

		var callHeader = new CallHeaderDTO
			{
				UserId = UserName,
				CameraId = CameraId
			};
		var callHeaderJson = JsonSerializer.Serialize<CallHeaderDTO>(callHeader);

		var applicationMessage = new MqttApplicationMessageBuilder()
			.WithTopic("call/stop")
			.WithPayload(callHeaderJson)
			.Build();
		await mqttClient.PublishAsync(applicationMessage, CancellationToken.None);

		if (mqttClient != null && mqttClient.IsConnected)
		{
			await mqttClient.DisconnectAsync();
		}

		if (hubConnection != null)
		{
			await hubConnection.StopAsync();
			await hubConnection.DisposeAsync();
		}
		//카메라 종료
		await _jsRuntime.InvokeVoidAsync("disposeVideo");
	}
}