@page "/camera/{cameraid:int}/thumbnail"
@inject IJSRuntime _jsRuntime

@inject ICameraRepository _cameraRepository

@implements IAsyncDisposable


<section class="page-section mb-1">
	<div class="container">
		<div class="bg-white border rounded-5">
			<section class="p-4 text-center w-100">
				<video width="@width" height="@height" autoplay id="video"></video>

				@* opencv.js 를 이용한 움직임 감지 *@
				<canvas id="canvasOutput" hidden></canvas>

				@* tfjs 를 이용한 화재 감지 *@
				<canvas id="fireCanvas" hidden></canvas>
			</section>

			<div class="p-4 text-center border-top">

				<label for="motionRadio">
					<input type="radio" name="detectRadio" id="motionRadio" @onchange="@CamShift" />
					Motion
				</label>

				<label class="mx-1" for="tfjsRadio">
					<input type="radio" name="detectRadio" id="tfjsRadio" @onchange="@tfjs" />
					Fire
				</label>

				<button class="btn btn-outline-primary mx-2" @onclick="bluetooth">블루투스 켜기</button>
			</div>
		</div>
	</div>

	@* 썸네일 전송하는 캔버스 *@
	<canvas hidden id="canvas_image"></canvas>
</section>

@if (isWebRTC)
{
	<Callee UserIdToThumbnail=@Camera.UserId CameraIdToThumbnail=@CameraId fromThumbnail=@true />
}


@code {
	[Parameter]
	public int CameraId { get; set; }

	static bool isWebRTC = false;

	private CameraDTO Camera { get; set; } = new();

	private int width = 360;
	private int height = 270;
    private bool isMotion = false;
    private bool isTfjs = false;

	//순서 1.비디오를 킨다 2. MQTT 접속을한다 3. 썸네일 전송을 시작한다
	protected override async Task OnAfterRenderAsync(bool firstRander)
	{
		if (firstRander)
		{
			Camera = await _cameraRepository.Get(CameraId);

			await DotnetHelper();
			await SetVideo();
			await SetMqtt();
		}
		await SendThumbnail();
	}

	//dotnet helper 생성
	public async Task DotnetHelper()
	{
		await _jsRuntime.InvokeVoidAsync("dotnetHelper", DotNetObjectReference.Create(this), CameraId);
	}

	//카메라
	public async Task SetVideo()
	{
		await _jsRuntime.InvokeVoidAsync("setVideo");
	}

	//MQTT client 생성, 토픽 구독
	public async Task SetMqtt()
	{
		await _jsRuntime.InvokeVoidAsync("SetMqtt");
	}

	//MQTT로 썸네일 전송
	public async Task SendThumbnail()
	{
		await _jsRuntime.InvokeVoidAsync("SendThumbnail", width, height);
	}

	//버튼을 누를시 모터제어를 할 기기와 블루투스 연동을 시작한다.
	public async Task bluetooth()
	{
		await _jsRuntime.InvokeVoidAsync("SetBluetooth");
	}

	[JSInvokable]
	public async ValueTask showWebRTC(bool boolWebRTC)
	{
		isWebRTC = boolWebRTC;

		await InvokeAsync(StateHasChanged);
	}

	//opencv.js를 사용한 움직임 감지
	public async Task CamShift()
	{
		isMotion = true;

		if (isTfjs)
		{
			await _jsRuntime.InvokeVoidAsync("tfjs_off");
			await _jsRuntime.InvokeVoidAsync("tfjs", false);
			isTfjs = false;
		}
		await _jsRuntime.InvokeVoidAsync("camShift", true);
	}

    //tensorflow.js를 사용한 화재 감지
    public async Task tfjs()
    {
        isTfjs = true;
        if (isMotion)
        {
            await _jsRuntime.InvokeVoidAsync("camShift_off");
            await _jsRuntime.InvokeVoidAsync("camShift", false);
            isMotion = false;
        }
        await _jsRuntime.InvokeVoidAsync("tfjs", true);
    }


	public async ValueTask DisposeAsync()
	{
		if (isWebRTC)
		{
			isWebRTC = false;
			await InvokeAsync(StateHasChanged);
		}
	}
}