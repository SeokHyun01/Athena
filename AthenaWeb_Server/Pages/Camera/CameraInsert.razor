@page "/camera/create"

@inject ICameraRepository _cameraRepository
@inject NavigationManager _navigationManager
@inject UserManager<IdentityUser> _userManager

@attribute [Authorize(Roles = SD.ROLE_CUSTOMER)]


<EditForm Model="Camera" OnValidSubmit="InsertCamera">
	<DataAnnotationsValidator />
	<div class="container mt-5">
		@if (ShowError)
		{
			<div>
				<p class="text-danger text-center">@Error</p>
			</div>
		}
		<div class="form-group">
			<label for="cameraName">카메라 이름</label>
			<InputText @bind-Value="Camera.Name" class="form-control" id="cameraName" />
			<ValidationMessage For="(()=>Camera.Name)"></ValidationMessage>
		</div>
		<button type="submit" class="btn btn-primary">카메라 @Action</button>
		<NavLink href=@($"camera") class="btn btn-secondary">돌아가기</NavLink>
	</div>
</EditForm>


<style>
	.form-group {
		margin-bottom: 1rem;
	}
</style>


@code {
	[CascadingParameter]
	public Task<AuthenticationState> _authState { get; set; }

	private string Action { get; set; } = "생성";
	private string Error { get; set; } = string.Empty;
	
	private bool IsLoading { get; set; }
	private bool ShowError { get; set; }

	private CameraDTO Camera { get; set; } = new();

	private IdentityUser User { get; set; }


	private async Task InsertCamera()
	{
		ShowError = false;
		IsLoading = true;
		await InvokeAsync(StateHasChanged);

		if (string.IsNullOrEmpty(User.Id))
		{
			throw new ArgumentNullException(nameof(User.Id));
		}
		Camera.UserId = User.Id;
		await _cameraRepository.Create(Camera);
		_navigationManager.NavigateTo($"camera");
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			IsLoading = true;
			await InvokeAsync(StateHasChanged);

			var authState = await _authState;
			var userName = authState?.User?.Identity?.Name;
			if (string.IsNullOrEmpty(userName))
			{
				throw new ArgumentNullException(nameof(userName));
			}
			User = await _userManager.FindByEmailAsync(userName);
			if (User == null)
			{
				throw new ArgumentNullException(nameof(User));
			}

			IsLoading = false;
			await InvokeAsync(StateHasChanged);
		}
	}
}
