@page "/camera/create"

@inject ICameraRepository _cameraRepository
@inject NavigationManager _navigationManager
@inject UserManager<AppUser> _userManager

@attribute [Authorize(Roles = SD.ROLE_CUSTOMER)]


<!-- Masthead-->
<header class="masthead">
	<div class="container">
		<div class="masthead-subheading">페이지 설명.</div>
		<div class="masthead-heading">카메라 생성하기</div>
		<EditForm Model="Camera" OnValidSubmit="InsertCamera">
			<DataAnnotationsValidator />
			@if (ShowError)
			{
				<div>
					<p class="text-danger text-center">@Error</p>
				</div>
			}
			<div class="d-flex justify-content-center">
				<form style="width: 26rem;">
					<div class="form-group">
						<InputText @bind-Value="Camera.Name" class="form-control" id="cameraName" placeholder="Camera Name" />
						<ValidationMessage For="(()=>Camera.Name)"></ValidationMessage>
					</div>
				</form>
			</div>
			<div class="list-inline mt-3">
				<button type="submit" class="btn btn btn-outline-primary btn-lg list-inline-item">생성하기</button>
				<a class="btn btn btn-outline-secondary btn-lg list-inline-item" href="camera">돌아가기</a>
			</div>
		</EditForm>
	</div>
</header>


<style>
	.list-inline-item:not(:last-child) {
		margin-right: .5rem;
	}
</style>


@code {
	[CascadingParameter]
	public Task<AuthenticationState> _authState { get; set; }

	private string Error { get; set; } = string.Empty;

	private bool IsLoading { get; set; }
	private bool ShowError { get; set; }

	private CameraDTO Camera { get; set; } = new();

	private AppUser User { get; set; }


	private async Task InsertCamera()
	{
		ShowError = false;
		IsLoading = true;
		await InvokeAsync(StateHasChanged);

		if (string.IsNullOrEmpty(User.Id))
		{
			throw new ArgumentNullException(nameof(User.Id));
		}
		Camera.UserId = User.Id;
		await _cameraRepository.Create(Camera);
		_navigationManager.NavigateTo($"camera");
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			IsLoading = true;
			await InvokeAsync(StateHasChanged);

			var authState = await _authState;
			var userName = authState?.User?.Identity?.Name;
			if (string.IsNullOrEmpty(userName))
			{
				throw new ArgumentNullException(nameof(userName));
			}
			User = await _userManager.FindByEmailAsync(userName);
			if (User == null)
			{
				throw new ArgumentNullException(nameof(User));
			}

			IsLoading = false;
			await InvokeAsync(StateHasChanged);
		}
	}
}
