@page "/camera"

@inject ILogger<CameraList> _logger
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject ICameraRepository _cameraRepository
@inject UserManager<AppUser> _userManager

@attribute [Authorize(Roles = SD.ROLE_CUSTOMER)]

@implements IAsyncDisposable


<!-- Masthead-->
<header class="masthead">
	<div class="container">
		<div class="masthead-subheading">페이지 소개.</div>
		<div class="masthead-heading">카메라 리스트</div>
		<a type="button" href=@($"camera/create") class="btn btn-outline-primary btn-xl text-uppercase mb-5">새 카메라 만들기</a>

		<div class="row row-cols-1 row-cols-lg-3">
			@if (Cameras.Any())
			{
				@foreach (var camera in Cameras)
				{
					<div class="col">
						<div class="card radius-15">
							<div class="card-body text-center">
								<div class="p-4 border radius-15">
									<div class="d-flex justify-content-center">
										<SfQRCodeGenerator Value=@($"{_navigationManager.BaseUri}camera/{camera.Id}/thumbnail")>
											<QRCodeGeneratorDisplayText Text=@(camera.Name)></QRCodeGeneratorDisplayText>
										</SfQRCodeGenerator>
									</div>
									<div class="d-flex justify-content-center">
										<img width="320" class="mb=3" id=@($"thumbnailImage{camera.Id}") />
									</div>
									<div class="mt-5 mb-3">
										<a type="button" href=@($"camera/{camera.Id}") class="btn btn-outline-primary">View</a>
										<a type="button" href=@($"camera/{camera.Id}/event") class="btn btn-outline-secondary">Events</a>
										<button type="button" class="btn btn-outline-danger" @onclick="()=>HandleDelete(camera.Id)">Delete</button>
									</div>
									<div class="d-grid">
										<input id=@($"angleInput{camera.Id}") type="range" class="form-range" value=@(camera.Angle) min="0" max="180" step="1" @onchange="(args)=>SetCameraAngle(args, camera.Id)" />
									</div>
								</div>
							</div>
						</div>
					</div>
				}
			}
		</div>
	</div>
</header>


<style>
	.radius-15 {
		border-radius: 15px;
	}

	.card {
		position: relative;
		display: flex;
		flex-direction: column;
		min-width: 0;
		word-wrap: break-word;
		background-color: #fff;
		background-clip: border-box;
		border: 0px solid rgba(0, 0, 0, 0);
		border-radius: .25rem;
		margin-bottom: 1.5rem;
	}

	element.style {
	}

	.list-inline-item:not(:last-child) {
		margin-right: .5rem;
	}
</style>


@code {
	[CascadingParameter]
	public Task<AuthenticationState> _authState { get; set; }

	private bool IsLoading { get; set; }

	private IEnumerable<CameraDTO> Cameras { get; set; } = new List<CameraDTO>();

	private IMqttClient? MqttClient { get; set; }

	private AppUser User { get; set; }


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var authState = await _authState;
			var userName = authState?.User?.Identity?.Name;
			if (string.IsNullOrEmpty(userName))
			{
				throw new ArgumentNullException(nameof(userName));
			}
			User = await _userManager.FindByEmailAsync(userName);
			if (User == null)
			{
				throw new ArgumentNullException(nameof(User));
			}
			await LoadCameras(User.Id);


			var mqttFactory = new MqttFactory();
			MqttClient = mqttFactory.CreateMqttClient();
			MqttClient.ApplicationMessageReceivedAsync += async e =>
			{
				var payload = e.ApplicationMessage.Payload;
				if (payload != null && payload.Length > 0)
				{
					if (e.ApplicationMessage.Topic == "camera/update/thumbnail")
					{
						var updateCamera = JsonSerializer.Deserialize<UpdateCameraDTO>(payload);
						if (updateCamera != null)
						{
							var ImageId = $"thumbnailImage{updateCamera.CameraId}";
							await _jsRuntime.InvokeVoidAsync("setImageSource", ImageId, updateCamera.Thumbnail);
						}
					}
					else if (e.ApplicationMessage.Topic == "camera/update/degree/ack")
					{
						var updateCamera = JsonSerializer.Deserialize<UpdateCameraDTO>(payload);
						if (updateCamera != null)
						{
							var InputId = $"angleInput{updateCamera.CameraId}";
							await _jsRuntime.InvokeVoidAsync("setInputDisabled", InputId, false);
						}
					}
				}
			};

			var mqttClientOptions = new MqttClientOptionsBuilder()
				.WithTcpServer("ictrobot.hknu.ac.kr", 8085)
				.WithCleanSession(true)
				.Build();
			await MqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);

			var mqttSubscribeOptions = mqttFactory.CreateSubscribeOptionsBuilder()
				.WithTopicFilter(f => { f.WithTopic("camera/update/thumbnail"); })
				.WithTopicFilter(f => { f.WithTopic("camera/update/degree/ack"); })
				.Build();
			await MqttClient.SubscribeAsync(mqttSubscribeOptions, CancellationToken.None);
		}
	}

	private async ValueTask LoadCameras(string userId)
	{
		IsLoading = true;
		StateHasChanged();

		Cameras = await _cameraRepository.GetAllByUserId(userId);

		IsLoading = false;
		StateHasChanged();
	}

	private async Task HandleDelete(int cameraId)
	{
		if (cameraId > 0)
		{
			await _cameraRepository.Delete(cameraId);
			if (string.IsNullOrEmpty(User?.Id))
			{
				throw new ArgumentNullException(nameof(User.Id));
			}
			await LoadCameras(User.Id);
		}
	}

	private async Task SetCameraAngle(ChangeEventArgs args, int cameraId)
	{
		if (args.Value != null)
		{
			var angle = int.Parse(args.Value.ToString());
			var currentCamera = await _cameraRepository.Get(cameraId);
			if (currentCamera != null)
			{
				currentCamera.Angle = angle;
				await _cameraRepository.Update(currentCamera);
			}

			var updateCamera = new UpdateCameraDTO
				{
					CameraId = cameraId,
					Degree = angle
				};
			var updateCameraJson = JsonSerializer.Serialize<UpdateCameraDTO>(updateCamera);

			if (MqttClient != null && MqttClient.IsConnected)
			{
				var applicationMessage = new MqttApplicationMessageBuilder()
				.WithTopic("camera/update/degree/syn")
				.WithPayload(updateCameraJson)
				.Build();
				await MqttClient.PublishAsync(applicationMessage, CancellationToken.None);

				var InputId = $"angleInput{updateCamera.CameraId}";
				await _jsRuntime.InvokeVoidAsync("setInputDisabled", InputId, true);
			}
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (MqttClient != null && MqttClient.IsConnected)
		{
			await MqttClient.DisconnectAsync();
		}
	}
}
