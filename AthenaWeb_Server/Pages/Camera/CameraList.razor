@page "/camera"

@inject ILogger<CameraList> _logger
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject ICameraRepository _cameraRepository
@inject UserManager<AppUser> _userManager

@attribute [Authorize(Roles = SD.ROLE_CUSTOMER)]

@implements IAsyncDisposable


<!-- Masthead-->
<header class="masthead">
	<div class="container">
		<a class="btn btn-primary btn-xl text-uppercase" href=@($"camera/create")>카메라 생성</a>

		<div class="row row-cols-1 row-cols-lg-2 row-cols-xl-4">
			@if (Cameras.Any())
			{
				@foreach (var camera in Cameras)
				{
					<div class="col">
						<div class="card radius-15">
							<div class="card-body text-center">
								<div class="p-4 border radius-15">
									<img id=@($"thumbnailImage{camera.Id}") />
									<SfQRCodeGenerator Value=@($"{_navigationManager.BaseUri}camera/{camera.Id}/thumbnail")>
										<QRCodeGeneratorDisplayText Text=@(camera.Name)></QRCodeGeneratorDisplayText>
									</SfQRCodeGenerator>
									<div class="list-inline contacts-social mt-3 mb-3">
										<a type="button" href=@($"camera/{camera.Id}") class="btn btn-outline-primary">View</a>
										<a href=@($"camera/{camera.Id}") class="list-inline-item border-0"><i class="bi bi-eye"></i></a>
										<a href=@($"camera/{camera.Id}/event") class="list-inline-item bg-twitter text-white border-0"><i class="bx bxl-twitter"></i></a>
										<button class="btn btn-danger mt-2" @onclick="()=>HandleDelete(camera.Id)">삭제</button>
									</div>
									<div class="d-grid">
										<input id=@($"angleInput{camera.Id}") type="range" value=@(camera.Angle) min="0" max="180" step="1" @onchange="(args)=>SetCameraAngle(args, camera.Id)" />
									</div>
								</div>
							</div>
						</div>
					</div>
				}
			}
		</div>
	</div>
</header>


<div class="container my-5">
	<div class="form-group">
		<h1 class="text-center">카메라 리스트</h1>
	</div>
	<div class="d-flex justify-content-end form-group">
		<NavLink href=@($"camera/create") class="btn btn-primary">카메라 생성하기</NavLink>
	</div>
	@if (Cameras.Any())
	{
		<table class="table">
			<thead>
				<tr>
					<th>ID</th>
					<th>Name</th>
					<th>Image</th>
					<th>Action</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var camera in Cameras)
				{
					<tr>
						<td>@($"Camera {camera.Id}")</td>
						<td>@(camera.Name)</td>
						<td>
							<div class="d-flex flex-column align-items-start">
								<NavLink href=@($"camera/{camera.Id}") class="btn btn-primary mb-3">
									카메라 보기
								</NavLink>
								<img id=@($"thumbnailImage{camera.Id}") />
							</div>
						</td>
						<td>
							<div class="d-flex flex-column align-items-start">
								<div class="d-flex">
									<NavLink class="btn btn-success" href=@($"camera/{camera.Id}/event")>이벤트 확인</NavLink>
									<SfQRCodeGenerator Value=@($"{_navigationManager.BaseUri}camera/{camera.Id}/thumbnail") />
								</div>
							</div>
							<button class="btn btn-danger mt-2" @onclick="()=>HandleDelete(camera.Id)">삭제</button>
							<input id=@($"angleInput{camera.Id}") type="range" value=@(camera.Angle) min="0" max="180" step="1"
						   @onchange="(args)=>SetCameraAngle(args, camera.Id)" />
						</td>
					</tr>
				}
			</tbody>
		</table>
	}
	else
	{
		@if (IsLoading)
		{
			<div class="spinner-border text-primary" role="status"></div>
		}

		else
		{
			<p>No recrods found.</p>
		}
	}
</div>


<style>
	.radius-15 {
		border-radius: 15px;
	}

	.card {
		position: relative;
		display: flex;
		flex-direction: column;
		min-width: 0;
		word-wrap: break-word;
		background-color: #fff;
		background-clip: border-box;
		border: 0px solid rgba(0, 0, 0, 0);
		border-radius: .25rem;
		margin-bottom: 1.5rem;
	}

	element.style {
	}

	.list-inline-item:not(:last-child) {
		margin-right: .5rem;
	}

	.contacts-social a {
		font-size: 16px;
		width: 36px;
		height: 36px;
		line-height: 36px;
		background: #ffffff;
		border: 1px solid #eeecec;
		text-align: center;
		border-radius: 50%;
		color: #2b2a2a;
	}

	.bg-facebook {
		background-color: #3b5998 !important;
	}

	.bg-twitter {
		background-color: #55acee !important;
	}

	.bg-linkedin {
		background-color: #0976b4 !important;
	}
</style>


@code {
	[CascadingParameter]
	public Task<AuthenticationState> _authState { get; set; }

	private bool IsLoading { get; set; }

	private IEnumerable<CameraDTO> Cameras { get; set; } = new List<CameraDTO>();

	private IMqttClient? MqttClient { get; set; }

	private AppUser User { get; set; }


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var authState = await _authState;
			var userName = authState?.User?.Identity?.Name;
			if (string.IsNullOrEmpty(userName))
			{
				throw new ArgumentNullException(nameof(userName));
			}
			User = await _userManager.FindByEmailAsync(userName);
			if (User == null)
			{
				throw new ArgumentNullException(nameof(User));
			}
			await LoadCameras(User.Id);


			var mqttFactory = new MqttFactory();
			MqttClient = mqttFactory.CreateMqttClient();
			MqttClient.ApplicationMessageReceivedAsync += async e =>
			{
				var payload = e.ApplicationMessage.Payload;
				if (payload != null && payload.Length > 0)
				{
					if (e.ApplicationMessage.Topic == "camera/update/thumbnail")
					{
						var updateCamera = JsonSerializer.Deserialize<UpdateCameraDTO>(payload);
						if (updateCamera != null)
						{
							var ImageId = $"thumbnailImage{updateCamera.CameraId}";
							await _jsRuntime.InvokeVoidAsync("setImageSource", ImageId, updateCamera.Thumbnail);
						}
					}
					else if (e.ApplicationMessage.Topic == "camera/update/degree/ack")
					{
						var updateCamera = JsonSerializer.Deserialize<UpdateCameraDTO>(payload);
						if (updateCamera != null)
						{
							var InputId = $"angleInput{updateCamera.CameraId}";
							await _jsRuntime.InvokeVoidAsync("setInputDisabled", InputId, false);
						}
					}
				}
			};

			var mqttClientOptions = new MqttClientOptionsBuilder()
				.WithTcpServer("ictrobot.hknu.ac.kr", 8085)
				.WithCleanSession(true)
				.Build();
			await MqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);

			var mqttSubscribeOptions = mqttFactory.CreateSubscribeOptionsBuilder()
				.WithTopicFilter(f => { f.WithTopic("camera/update/thumbnail"); })
				.WithTopicFilter(f => { f.WithTopic("camera/update/degree/ack"); })
				.Build();
			await MqttClient.SubscribeAsync(mqttSubscribeOptions, CancellationToken.None);
		}
	}

	private async ValueTask LoadCameras(string userId)
	{
		IsLoading = true;
		StateHasChanged();

		Cameras = await _cameraRepository.GetAllByUserId(userId);

		IsLoading = false;
		StateHasChanged();
	}

	private async Task HandleDelete(int cameraId)
	{
		if (cameraId > 0)
		{
			await _cameraRepository.Delete(cameraId);
			if (string.IsNullOrEmpty(User?.Id))
			{
				throw new ArgumentNullException(nameof(User.Id));
			}
			await LoadCameras(User.Id);
		}
	}

	private async Task SetCameraAngle(ChangeEventArgs args, int cameraId)
	{
		if (args.Value != null)
		{
			var angle = int.Parse(args.Value.ToString());
			var currentCamera = await _cameraRepository.Get(cameraId);
			if (currentCamera != null)
			{
				currentCamera.Angle = angle;
				await _cameraRepository.Update(currentCamera);
			}

			var updateCamera = new UpdateCameraDTO
				{
					CameraId = cameraId,
					Degree = angle
				};
			var updateCameraJson = JsonSerializer.Serialize<UpdateCameraDTO>(updateCamera);

			if (MqttClient != null && MqttClient.IsConnected)
			{
				var applicationMessage = new MqttApplicationMessageBuilder()
				.WithTopic("camera/update/degree/syn")
				.WithPayload(updateCameraJson)
				.Build();
				await MqttClient.PublishAsync(applicationMessage, CancellationToken.None);

				var InputId = $"angleInput{updateCamera.CameraId}";
				await _jsRuntime.InvokeVoidAsync("setInputDisabled", InputId, true);
			}
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (MqttClient != null && MqttClient.IsConnected)
		{
			await MqttClient.DisconnectAsync();
		}
	}
}
