@page "/register"

@inject NavigationManager _navigationManager
@inject IAuthenticationService _authSerivce


<EditForm Model="SignUpRequest" OnValidSubmit="RegisterUser">
	<DataAnnotationsValidator />
	<div class="container mt-5">
		<h2>Sign Up</h2>
		@if (ShowErrors)
		{
			<div>
				@foreach (var error in Errors)
				{
					<p class="text-danger text-center">@error</p>
				}
			</div>
		}
		<div class="form-group">
			<label for="email">Email address</label>
			<InputText @bind-Value="SignUpRequest.Email" type="email" class="form-control" id="email" aria-describedby="emailHelp" />
			<ValidationMessage For="(()=>SignUpRequest.Email)"></ValidationMessage>
			<small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
		</div>
		<div class="form-group">
			<label for="password">Password</label>
			<InputText @bind-Value="SignUpRequest.Password" type="password" class="form-control" id="password" />
			<ValidationMessage For="(()=>SignUpRequest.Password)"></ValidationMessage>
		</div>
		<div class="form-group">
			<label for="confirmPassword">Confirm Password</label>
			<InputText @bind-Value="SignUpRequest.ConfirmPassword" type="password" class="form-control" id="confirmPassword" />
			<ValidationMessage For="(()=>SignUpRequest.ConfirmPassword)"></ValidationMessage>
		</div>
		<button type="submit" class="btn btn-primary">Sign Up</button>
	</div>
</EditForm>

<style>
	.form-group {
		margin-bottom: 1rem;
	}
</style>


@code {
	private bool ShowErrors { get; set; }
	private bool IsProcessing { get; set; } = false;

	private SignUpRequestDTO SignUpRequest = new();

	private IEnumerable<string> Errors { get; set; }

	private async Task RegisterUser()
	{
		ShowErrors = false;
		IsProcessing = true;

		var result = await _authSerivce.RegisterUser(SignUpRequest);
		if (result.IsSucceeded)
		{
			_navigationManager.NavigateTo("/login");
		}
		else
		{
			Errors = result.Errors;
			ShowErrors = true;
			await InvokeAsync(StateHasChanged);
		}
		IsProcessing = false;
	}
}